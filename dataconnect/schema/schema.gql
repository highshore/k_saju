"""
Domain schema for Locations (formerly Experiences) and related entities.

Notes:
- Primary keys use UUIDs for compatibility with Data Connect defaults.
- The previous SQL "experiences" entity is renamed to Location. The geo
  meeting-point entity is named Place to avoid collision.
- Place omits the country field per requirements.
"""

enum ActivityLevel {
  LIGHT
  MODERATE
  INTENSE
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CurrencyCode {
  KRW
  USD
  EUR
  JPY
  GBP
}

enum LangCode {
  EN
  KO
  JA
  ZH
  FR
  DE
  ES
}

enum TranslationStatus {
  ORIGINAL
  MACHINE_TRANSLATED
  HUMAN_TRANSLATED
}

type Host @table(name: "hosts") {
  id: UUID! @default(expr: "uuidV4()")
  displayName: String! @col(dataType: "text")
  profileTitle: String @col(dataType: "text")
  about: String @col(dataType: "text")
  createdAt: Date! @col(dataType: "timestamptz") @default(expr: "now()")
}

type Place @table(name: "places") {
  id: UUID! @default(expr: "uuidV4()")
  region: String! @col(dataType: "text")
  city: String! @col(dataType: "text")
  district: String @col(dataType: "text")
  postalCode: String @col(dataType: "text")
  addressLine: String @col(dataType: "text")
  placeLabel: String @col(dataType: "text")
  latitude: Float
  longitude: Float
}

type CancellationPolicy @table(name: "cancellation_policies") {
  id: UUID! @default(expr: "uuidV4()")
  name: String! @col(dataType: "text")
  description: String @col(dataType: "text")
  freeUntilHours: Int! @col(name: "free_until_hours")
}

type Location @table(name: "locations") {
  id: UUID! @default(expr: "uuidV4()")
  airbnbSlug: String @col(name: "airbnb_slug") @unique
  host: Host!
  title: String! @col(dataType: "text")
  tagline: String @col(dataType: "text")
  longDescription: String @col(name: "long_description", dataType: "text")
  languagePrimary: LangCode! @col(name: "language_primary") @default(value: "EN")
  activityLevel: ActivityLevel! @col(name: "activity_level") @default(value: "LIGHT")
  skillLevel: SkillLevel! @col(name: "skill_level") @default(value: "BEGINNER")
  maxGuestsTotal: Int! @col(name: "max_guests_total")
  minAge: Int @col(name: "min_age")
  currency: CurrencyCode! @default(value: "KRW")
  basePricePerGuest: Float! @col(name: "base_price_per_guest", dataType: "numeric(12,2)")
  freeCancellation: Boolean! @col(name: "free_cancellation") @default(value: true)
  freeCancelCutoffHours: Int @col(name: "free_cancel_cutoff_hours")
  place: Place
  meetingPointNote: String @col(name: "meeting_point_note", dataType: "text")
  isActive: Boolean! @col(name: "is_active") @default(value: true)
  createdAt: Date! @col(name: "created_at", dataType: "timestamptz") @default(expr: "now()")
  cancellationPolicy: CancellationPolicy
}

type LocationPhoto @table(name: "location_photos") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  imageUrl: String! @col(name: "image_url", dataType: "text")
  sortOrder: Int! @col(name: "sort_order") @default(value: 0)
}

type LocationHighlight @table(name: "location_highlights") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  label: String! @col(dataType: "text")
  sortOrder: Int! @col(name: "sort_order") @default(value: 0)
}

type LocationStep @table(name: "location_steps") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  title: String! @col(dataType: "text")
  description: String @col(dataType: "text")
  sortOrder: Int! @col(name: "sort_order") @default(value: 0)
}

type LocationWhatToBring @table(name: "location_what_to_bring") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  itemText: String! @col(name: "item_text", dataType: "text")
  sortOrder: Int! @col(name: "sort_order") @default(value: 0)
}

type AccessibilityFeature @table(name: "accessibility_features") {
  id: UUID! @default(expr: "uuidV4()")
  code: String! @unique @col(dataType: "text")
  label: String! @col(dataType: "text")
  locations_via_LocationAccessibility: [Location!]!
}

type LocationAccessibility @table(name: "location_accessibility", key: ["location", "feature"]) {
  location: Location!
  feature: AccessibilityFeature!
}

type LocationLanguage @table(name: "location_languages", key: ["location", "lang"]) {
  location: Location!
  lang: LangCode!
}

type LocationRequirement @table(name: "location_requirements") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  text: String! @col(dataType: "text")
  sortOrder: Int! @col(name: "sort_order") @default(value: 0)
}

type LocationSession @table(name: "location_sessions") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  startsAt: Date! @col(name: "starts_at", dataType: "timestamptz")
  endsAt: Date! @col(name: "ends_at", dataType: "timestamptz")
  capacityTotal: Int! @col(name: "capacity_total")
  capacityAvailable: Int! @col(name: "capacity_available")
  pricePerGuest: Float! @col(name: "price_per_guest", dataType: "numeric(12,2)")
  currency: CurrencyCode! @default(value: "KRW")
}

type Review @table(name: "reviews") {
  id: UUID! @default(expr: "uuidV4()")
  location: Location!
  reviewerName: String! @col(name: "reviewer_name", dataType: "text")
  reviewerLocation: String @col(name: "reviewer_location", dataType: "text")
  rating: Float! @col(dataType: "numeric(2,1)")
  body: String! @col(dataType: "text")
  createdAt: Date! @col(name: "created_at", dataType: "timestamptz")
  translation: TranslationStatus! @default(value: "ORIGINAL")
}

type LocationStats @table(name: "location_stats") {
  location: Location! @unique
  ratingAvg: Float! @col(name: "rating_avg", dataType: "numeric(3,2)") @default(value: 0)
  ratingCount: Int! @col(name: "rating_count") @default(value: 0)
  lastReviewAt: Date @col(name: "last_review_at", dataType: "timestamptz")
}
